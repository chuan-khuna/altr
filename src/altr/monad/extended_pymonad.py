from pymonad.either import Either as __pyEither
from typing import Any, Generic, TypeVar


"""
# generated by Copilot

This module extends the functionality of the `pymonad.either.Either` class by adding additional
methods and shorthand operators for improved usability.

Classes:
    Either: A subclass of `pymonad.either.Either` that provides additional methods and operator overloads.

Functions:
    Left(value: M) -> Either[M, Any]:
        Creates a value of the first possible type in the Either monad, representing a failure or error state.

    Right(value: T) -> Either[Any, T]:
        Creates a value of the second possible type in the Either monad, representing a success state.

Type Variables:
    M: Represents the type of the value in the `Left` state (typically used for error messages or failure values).
    S: Unused in this module but reserved for potential future extensions.
    T: Represents the type of the value in the `Right` state (typically used for success values).
"""


M = TypeVar('M')
S = TypeVar('S')
T = TypeVar('T')


class Either(__pyEither, Generic[M, T]):
    """Extend pymonad Either"""

    def __rshift__(self, func):
        """Use `>>` as a shorthand for `bind`"""
        return self.bind(func)

    def __or__(self, func):
        """Use `|` as a shorthand for `bind`"""
        return self.bind(func)

    def then(self, func):
        """Use `then` as a shorthand for `bind`"""
        return self.bind(func)

    @property
    def error(self) -> str | None:
        """when the instance is a Left, can use `l.error` to get the error message"""
        if self.is_left():
            return self.monoid[0]
        return None


def Left(value: M) -> Either[M, Any]:
    """Creates a value of the first possible type in the Either monad."""
    return Either(None, (value, False))


def Right(value: T) -> Either[Any, T]:
    """Creates a value of the second possible type in the Either monad."""
    return Either(value, (None, True))
